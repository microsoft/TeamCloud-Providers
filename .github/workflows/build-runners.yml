name: Build TeamCloud Runners

on:
  push:
    branches: [ main ]

jobs:

  registry:
    name: Ensure container registry
    runs-on: ubuntu-latest

    env:
      TARGET_SUBSCRIPTION: 12223725-70b0-45a6-96c4-a13c344fdc57
      TARGET_RESOURCEGROUP: TeamCloud-Registry
      TARGET_RESOURCEGROUPLOCATION: eastus

    outputs:
      registryUrl: ${{ steps.deploy.outputs.registryUrl }}
      registryUsername: ${{ steps.deploy.outputs.registryUsername }}
      registryPassword: ${{ steps.deploy.outputs.registryPassword }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Get UUID
        id: generate-uuid
        uses: filipstefansson/uuid-action@v1

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - id: deploy
        name: Azure Deploy
        uses: azure/CLI@v1
        with:
          azcliversion: 2.32.0
          inlineScript: |

            # select the target subscription
            az account set --subscription ${{ env.TARGET_SUBSCRIPTION }}

            # prepare resource group
            if [ "$(az group exists -g ${{ env.TARGET_RESOURCEGROUP }})" == "false" ]; then
              az group create -n ${{ env.TARGET_RESOURCEGROUP }} -l ${{ env.TARGET_RESOURCEGROUPLOCATION }}
            fi

            # deploy resources to resource group
            ARM_OUTPUT=$(az deployment group create -g ${{ env.TARGET_RESOURCEGROUP }} -n ${{ steps.generate-uuid.outputs.uuid }} --mode Complete --template-file $GITHUB_WORKSPACE/_registry/azuredeploy.json --parameter registryName="TeamCloud" --parameter registryLocations="['eastus', 'westus', 'westeurope']")

            # populate deployment output
            echo "::set-output name=registryUrl::$(echo $ARM_OUTPUT | jq --raw-output '.properties.outputs.registryUrl.value')"
            echo "::set-output name=registryUsername::$(echo $ARM_OUTPUT | jq --raw-output '.properties.outputs.registryUsername.value')"
            echo "::set-output name=registryPassword::$(echo $ARM_OUTPUT | jq --raw-output '.properties.outputs.registryPassword.value')"

  prepare:
    name: Prepare container build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.9
        with:
          versionSpec: '5.x'

      - name: Execute GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.9
        with:
          useConfigFile: true

    outputs:
      version: ${{ steps.gitversion.outputs.assemblySemVer }}

  core:
    name: Build Core
    runs-on: ubuntu-latest
    needs: [registry, prepare]

    env:
      CONTAINER_VERSION: ${{ needs.prepare.outputs.version }}
      REGISTRY_URL: ${{ needs.registry.outputs.registryUrl }}
      REGISTRY_USERNAME: ${{ needs.registry.outputs.registryUsername }}
      REGISTRY_PASSWORD: ${{ needs.registry.outputs.registryPassword }}

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker Login (DockerHub)
        uses: docker/login-action@v1.6.0
        with:
          username: ${{ secrets.DOCKER_USR }}
          password: ${{ secrets.DOCKER_PWD }}

      - name: Docker Login (TeamCloud)
        uses: docker/login-action@v1.6.0
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build and push Docker image - runner
        uses: docker/build-push-action@v2.1.0
        with:
          context: ./core
          file: ./core/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            teamcloud/tcrunner-core:latest
            teamcloud/tcrunner-core:${{ env.CONTAINER_VERSION }}
            ${{ env.REGISTRY_URL }}/teamcloud/tcrunner-core:latest
            ${{ env.REGISTRY_URL }}/teamcloud/tcrunner-core:${{ env.CONTAINER_VERSION }}

  runner:
    name: Build Runner 
    runs-on: ubuntu-latest
    needs: [ registry, prepare, core ]
    
    env:
      CONTAINER_VERSION: ${{ needs.prepare.outputs.version }}
      REGISTRY_URL: ${{ needs.registry.outputs.registryUrl }}
      REGISTRY_USERNAME: ${{ needs.registry.outputs.registryUsername }}
      REGISTRY_PASSWORD: ${{ needs.registry.outputs.registryPassword }}

    strategy:
      max-parallel: 5
      matrix:
        runner: ['arm', 'terraform', 'helm']

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker Login (DockerHub)
        uses: docker/login-action@v1.6.0
        with:
          username: ${{ secrets.DOCKER_USR }}
          password: ${{ secrets.DOCKER_PWD }}

      - name: Docker Login (TeamCloud)
        uses: docker/login-action@v1.6.0
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build and push Docker image - ${{ matrix.runner }}
        uses: docker/build-push-action@v2.1.0
        with:
          context: ./${{ matrix.runner }}
          file: ./${{ matrix.runner }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            teamcloud/tcrunner-${{ matrix.runner }}:latest
            teamcloud/tcrunner-${{ matrix.runner }}:${{ env.CONTAINER_VERSION }}
            ${{ env.REGISTRY_URL }}/teamcloud/tcrunner-${{ matrix.runner }}:latest
            ${{ env.REGISTRY_URL }}/teamcloud/tcrunner-${{ matrix.runner }}:${{ env.CONTAINER_VERSION }}

          
